package com.example.demo;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface productsRepository extends JpaRepository<products, Integer> {
	@Query("SELECT p.id,p.name, p.barcode,p.quantity, p.price,p.companyFK, p.categoryFK, ps.userFK from products p INNER JOIN productsSuppliers ps on ps.productFK=p.id")
	List<Object[]> getAllProducts();

	@Query("SELECT p.id,p.name, p.barcode,p.quantity, p.price,p.companyFK, p.categoryFK, ps.userFK from products p INNER JOIN productsSuppliers ps on ps.productFK=p.id where p.name LIKE :name% or p.barcode LIKE :name%")
	List<Object[]> searchProducts(@Param("name") String name);

	@Query("SELECT p.id,p.name, p.barcode,p.quantity, p.price,p.companyFK, p.categoryFK, ps.userFK from products p INNER JOIN productsSuppliers ps on ps.productFK=p.id where p.barcode LIKE :barcode%")
	List<Object[]> searchProductsByBarCode(@Param("barcode") String barcode);

	@Query("SELECT p.id,p.name, p.barcode,p.quantity, p.price,p.companyFK, p.categoryFK, ps.userFK from products p INNER JOIN productsSuppliers ps on ps.productFK=p.id where n.barcode =:barcode")
	List<Object[]> searchProductsByExactBarCode(@Param("barcode") String barcode);

	List<Object[]> findByNameLike(String name);

	@Modifying
	@Query("UPDATE products p set p.quantity =:quantity, p.price =:price where p.id=:id")
	@Transactional
	void updateProduct(@Param("id") Integer id, @Param("quantity") Integer quantity, @Param("price") Integer price);

}
